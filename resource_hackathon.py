# -*- coding: utf-8 -*-
"""Resource_Hackathon.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XVWMiSC_5fJ2Zh5WDSwoNYccDf_CjO47
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import seaborn as sns
sns.set(style="whitegrid")
from collections import Counter
from random import randint
import random
import warnings
warnings.filterwarnings('ignore')
from sklearn.cluster import KMeans
import numpy as np
from matplotlib import pyplot as plt

# %matplotlib inline

df=pd.read_csv('/content/hackathon.csv')
df.head()

df.columns

df.info()

df.describe()

"""**Gender Diversity**"""

list(df['Gender'].unique())[:-1]

plt.figure(figsize=(6,6))

Gender_df = df['Gender'].value_counts()

plt.title('Gender diversity', y=-0.15)
plt.pie(Gender_df, labels=list(df['Gender'].unique())[:-1]);
plt.axis('equal');

"""**Skillset of a resource**"""

skill_columns=['Name','Skill 1', 'Skill 2', 'Skill 3', 'Skill 4', 'Skill 5']
df_skill=df[skill_columns]
df_skill.head()

resource_name = input ("Enter a Name of the resource: ")

df_skill[df_skill['Name'] == resource_name ]

"""**Security Maven on a product**"""

sm_columns=['Name','Product','Security Maven']
df_sm=df[sm_columns]
df_sm.head()

security_maven = input ("Enter product name: ")
security_maven=security_maven.strip()

df_sm[df_sm['Product'] == security_maven ]

"""**PM, UX or Anchor on a Product**"""

role_columns=['Name','Product','Role','Anchor']
df_role=df[role_columns]
df_role.head()

product_name = input ("Enter product name: ")
product_name=product_name.strip()

df_role[df_role['Product'] == product_name ]

df_role[(df_role.Product == product_name) & (df_role.Role != 'Engr')]
df_role[df_role.Role != 'Engr']

"""**How many contractor resources? Vendor-wise, Location-wise**"""

f, ax = plt.subplots(figsize=(12, 10))

sns.countplot(x="Vendor", data=df[df['E/C'] == 'C' ], palette = 'GnBu')
ax.set(xlabel='Vendor', ylabel='Number of contractors',title='Count of contractors:Vendor-wise')
plt.show()

plt.figure(figsize = (12, 8))

ax = sns.countplot(x='Prod Build Location', data=df[df['E/C'] == 'C' ], palette = 'Set3',order = df['Prod Build Location'].value_counts().index)
ax.set_xlabel(xlabel = 'Prod Build Location', fontsize = 14)
ax.set_ylabel(ylabel = 'Number of contractors', fontsize = 14)
ax.set_title(label = 'Count of contractors:Location-wise', fontsize = 18)
plt.show()

"""**What is the PM to UX to Engr ratio?**"""

df['Role'] = df['Role'].str.strip()

s=df.Role.value_counts(normalize=True,sort=False).mul(100) # mul(100) is == *100
s.index.name,s.name='Role','Ratio' #setting the name of index and series
print(s.to_frame()) #series.to_frame() returns a dataframe

"""**Location-wise resources â€“ PMs, UXs, Engrs**"""

df_loc=df.dropna(subset = ['Role', 'Prod Build Location'])
df_loc['Prod Build Location'] = df_loc['Prod Build Location'].str.strip()
df_loc['Role'] = df_loc['Role'].str.strip()
df_loc

df_loc.groupby('Prod Build Location').Role.value_counts().unstack().plot.barh()

"""**Need 1 intermediate 1 junior, 2 senior resource available for new products starting on May 15 2021 for build location in IL? (Hint: Resources have to be found based on product end-date closest to May 15 2021, their level and their location)**"""

df['Prod Build Location']=df['Prod Build Location'].str.strip()
df_IL= df[df['Prod Build Location'] == 'IL']
df_IL.head()

df_IL= df[df['Prod Start Date'] > '05/15/21']

"""**Alert on product missing end date despite it is going on for one month?**"""

df['Prod Start Date'] = pd.to_datetime(df['Prod Start Date'])
df['Prod End Date'] = pd.to_datetime(df['Prod End Date'])
df['prod_days'] = (df['Prod End Date'] - df['Prod Start Date']).dt.days
df.head()

df_alert=df[df['prod_days'] > 30]

df_alert = df_alert[['Product','Prod Start Date','Prod End Date','prod_days']]

df_alert.head()

"""**Resource ready for next rotation? (Hint: Identify folks working longest on product based on their resource product start date compared to current date?)**"""

from datetime import date, datetime
df['Start Date'] = pd.to_datetime(df['Start Date'])

df['resource_days'] = (pd.Timestamp.now().floor('d') - df['Start Date']).dt.days

df_rotation = df[['Name','Product','Start Date','resource_days']]
df_rotation.head()

"""Finding top 20 longest working reources"""

df_rotation_next=df_rotation.nlargest(20, 'resource_days')
df_rotation_next=df_rotation_next[['Name','Product','Start Date','resource_days']]

df_rotation_next.resource_days = df_rotation_next.resource_days.astype(int)

df_rotation_next.style.background_gradient('inferno')